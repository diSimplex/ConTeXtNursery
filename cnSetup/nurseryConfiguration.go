// Copyright 2020 PerceptiSys Ltd, (Stephen Gaito)
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This code has been inspired by: Shane Utt's excellent article:
//   https://shaneutt.com/blog/golang-ca-and-signed-cert-go/

package main

import (
  "os"
  "strconv"
  "strings"
  "text/template"
)

func computePrimaryNurseryUrl(pNursery *Nursery) string {
  return "https://"+pNursery.Hosts[0]+":"+strconv.Itoa(int(pNursery.Port))
}

func normalizeNurseryConfig(nursery *Nursery, defaults Nursery) {

  if nursery.Port      == 0  { nursery.Port      = defaults.Port }
  if nursery.Html_Dir  == "" { nursery.Html_Dir  = defaults.Html_Dir }
  if nursery.Key_Path  == "" { nursery.Key_Path  = defaults.Key_Path }
  if nursery.Cert_Path == "" { nursery.Cert_Path = defaults.Cert_Path }

  if nursery.Host == "" { nursery.Host = defaults.Host }
  if nursery.Host != "" {
    hosts := strings.Split(nursery.Host, ",")
    for _, aString := range hosts {
      nursery.Hosts = append(nursery.Hosts, strings.TrimSpace(aString))
    }
    if nursery.Name == "" { nursery.Name = nursery.Hosts[0] }
    nPathPrefix := nursery.Name +"/"+nursery.Name
    if nursery.Key_Path  == "" { nursery.Key_Path  = nPathPrefix+"-key.pem" }
    if nursery.Cert_Path == "" { nursery.Cert_Path = nPathPrefix+"-cert.pem" }
  }
}

func writeNurseryConfiguration(theNursery *Nursery, primaryUrl string) {

  yamlTemplateStr := `
# This is the configuration for the {{.Name}} Nursery
#
# It has been automatically generated by the cnSetup tool
#
# DO NOT EDIT THIS FILE (any changes will be lost)

host:             {{.Host}}
port:             {{.port}}
html_dir:         {{.Html_Dir}}
url_base:         {{.Url_Base}}
primary_url:      {{.Primary_Url}}
certificate_path: {{.Certificate_Path}}
key_path:         {{.Key_Path}}
`


  yamlTemplate, err := template.New("yamlTemplate").Parse(yamlTemplateStr)
  setupMayBeFatal("Could not parse the yaml template", err)

  err = yamlTemplate.Execute(os.Stdout, theNursery)
}
